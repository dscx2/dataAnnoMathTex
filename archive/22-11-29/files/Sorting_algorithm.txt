{{Short description|An algorithm that arranges lists in order}}
{{unreferenced section|date=May 2019}}
In [[computer science]], a '''sorting algorithm''' is an [[algorithm]] that puts elements of a [[List (computing)|list]] in a certain [[Total order|order]]. The most frequently used orders are [[numerical order]] and [[lexicographical order]]. Efficient [[sorting]] is important for optimizing the [[Algorithmic efficiency|efficiency]] of other algorithms (such as [[search algorithm|search]] and [[merge algorithm|merge]] algorithms) that require input data to be in sorted lists. Sorting is also often useful for [[Canonicalization|canonicalizing]] data and for producing human-readable output. More formally, the output of any sorting algorithm must satisfy two conditions:

# The output is in nondecreasing order (each element is no smaller than the previous element according to the desired [[total order]]);<!-- confusing; this appears to mean that the output must be in ascending order, which isn't a necessary condition -->
# The output is a [[permutation]] (a reordering, yet retaining all of the original elements) of the input.

For optimum efficiency, the input data in fast memory should be stored in a [[Data structure|data structure]] which allows [[random access]] rather than one that allows only [[sequential access]].

Sorting algorithms are often referred to as a word followed by the word "sort" and grammatically are used in English as noun phrases, for example in the sentence, "it is inefficient to use insertion sort on large lists" the phrase ''insertion sort'' refers to the [[insertion sort]] sorting algorithm.

==History==
From the beginning of computing, the sorting problem has attracted a great deal of research, perhaps due to the complexity of solving it efficiently despite its simple, familiar statement. Among the authors of early sorting algorithms around 1951 was [[Betty Holberton]] (born Snyder), who worked on [[ENIAC]] and [[UNIVAC]].<ref name="refrigerator">{{Cite web|url=http://mentalfloss.com/article/53160/meet-refrigerator-ladies-who-programmed-eniac|title=Meet the 'Refrigerator Ladies' Who Programmed the ENIAC|website=Mental Floss|access-date=2016-06-16|date=2013-10-13}}</ref><ref name="NYTimes">{{cite news|last1=Lohr|first1=Steve|title=Frances E. Holberton, 84, Early Computer Programmer|url=https://www.nytimes.com/2001/12/17/business/frances-e-holberton-84-early-computer-programmer.html|access-date=16 December 2014|publisher=NYTimes|date=Dec 17, 2001}}</ref> [[Bubble sort]] was analyzed as early as 1956.<ref>{{cite thesis |last=Demuth |first=Howard B. |title=Electronic Data Sorting |type=PhD thesis |publisher=Stanford University |year=1956 |id={{ProQuest|301940891}} }}</ref> Comparison sorting algorithms have a fundamental requirement of [[Big omega notation|Ω(''n'' log ''n'')]] comparisons (some input sequences will require a multiple of ''n'' log ''n'' comparisons, where n is the number of elements in the array to be sorted). Algorithms not based on comparisons, such as [[counting sort]], can have better performance. Asymptotically optimal algorithms have been known since the mid-20th century—useful new algorithms are still being invented, with the now widely used [[Timsort]] dating to 2002, and the [[library sort]] being first published in 2006.

Sorting algorithms are prevalent in introductory [[computer science]] classes, where the abundance of algorithms for the problem provides a gentle introduction to a variety of core algorithm concepts, such as [[big O notation]], [[divide and conquer algorithm]]s, [[data structure]]s such as [[heap (data structure)|heap]]s and [[binary tree]]s, [[randomized algorithm]]s, [[best, worst and average case]] analysis, [[time–space tradeoff]]s, and [[upper and lower bounds]].

Sorting small arrays optimally (in least amount of comparisons and swaps) or fast (i.e. taking into account machine specific details) is still an open research problem, with solutions only known for very small arrays (<20 elements). Similarly optimal (by various definition) sorting on a parallel machine is an open research topic.

==Classification==<!-- This section is linked from [[Merge sort]] -->
Sorting algorithms are often classified by:
* [[Computational complexity theory|Computational complexity]] ([[Best, worst and average case|worst, average and best]] behavior) in terms of the size of the list (''n''). For typical serial sorting algorithms good behavior is O(''n''&nbsp;log&nbsp;''n''), with parallel sort in O(log<sup>2</sup>&nbsp;''n''), and bad behavior is O(''n''<sup>2</sup>). (See [[Big O notation]].) Ideal behavior for a serial sort is O(''n''), but this is not possible in the average case. Optimal parallel sorting is O(log&nbsp;''n''). [[Comparison sort|Comparison-based sorting algorithms]] need at least Ω(''n''&nbsp;log&nbsp;''n'') comparisons for most inputs.
* [[Computational complexity theory|Computational complexity]] of swaps (for "in-place" algorithms).
* [[Memory (computing)|Memory]] usage (and use of other computer resources). In particular, some sorting algorithms are "[[In-place algorithm|in-place]]". Strictly, an in-place sort needs only O(1) memory beyond the items being sorted; sometimes O(log(''n'')) additional memory is considered "in-place".
* Recursion.  Some algorithms are either recursive or non-recursive, while others may be both (e.g., merge sort).
* Stability: [[#Stability|stable sorting algorithms]] maintain the relative order of records with equal keys (i.e., values).
* Whether or not they are a [[comparison sort]]. A comparison sort examines the data only by comparing two elements with a comparison operator.
* General method: insertion, exchange, selection, merging, ''etc.'' Exchange sorts include bubble sort and quicksort. Selection sorts include shaker sort and heapsort.
* Whether the algorithm is serial or parallel. The remainder of this discussion almost exclusively concentrates upon serial algorithms and assumes serial operation.
* Adaptability: Whether or not the presortedness of the input affects the running time.  Algorithms that take this into account are known to be [[Adaptive sort|adaptive]].

===Stability===
[[File:Sorting stability playing cards.svg|thumb|An example of stable sort on playing cards. When the cards are sorted by rank with a stable sort, the two 5s must remain in the same order in the sorted output that they were originally in. When they are sorted with a non-stable sort, the 5s may end up in the opposite order in the sorted output.]]
Stable sort algorithms sort repeated elements in the same order that they appear in the input. When sorting some kinds of data, only part of the data is examined when determining the sort order. For example, in the card sorting example to the right, the cards are being sorted by their rank, and their suit is being ignored. This allows the possibility of multiple different correctly sorted versions of the original list. Stable sorting algorithms choose one of these, according to the following rule: if two items compare as equal, like the two 5 cards, then their relative order will be preserved, so that if one came before the other in the input, it will also come before the other in the output.

Stability is important for the following reason: say that student records consisting of name and class section are sorted dynamically on a web page, first by name, then by class section in a second operation.  If a stable sorting algorithm is used in both cases, the sort-by-class-section operation will not change the name order; with an unstable sort, it could be that sorting by section shuffles the name order.  Using a stable sort, users can choose to sort by section and then by name, by first sorting using name and then sort again using section, resulting in the name order being preserved.  (Some spreadsheet programs obey this behavior: sorting by name, then by section yields an alphabetical list of students by section.)<br>
Another reason: unstable sort may yield different output for the same input from run to run. Such behavior is unsuitable for some applications, for example for client-server applications where the server uses pagination for output and performs a new search-and-sort for every new page requested by the client.

More formally, the data being sorted can be represented as a record or tuple of values, and the part of the data that is used for sorting is called the ''key''. In the card example, cards are represented as a record (rank, suit), and the key is the rank. A sorting algorithm is stable if whenever there are two records R and S with the same key, and R appears before S in the original list, then R will always appear before S in the sorted list.

When equal elements are indistinguishable, such as with integers, or more generally, any data where the entire element is the key, stability is not an issue. Stability is also not an issue if all keys are different.

Unstable sorting algorithms can be specially implemented to be stable. One way of doing this is to artificially extend the key comparison, so that comparisons between two objects with otherwise equal keys are decided using the order of the entries in the original input list as a tie-breaker. Remembering this order, however, may require additional time and space.

One application for stable sorting algorithms is sorting a list using a primary and secondary key. For example, suppose we wish to sort a hand of cards such that the suits are in the order clubs (♣), diamonds (<span style="color:#ff0000">♦</span>), hearts (<span style="color:#ff0000">♥</span>), spades (♠), and within each suit, the cards are sorted by rank. This can be done by first sorting the cards by rank (using any sort), and then doing a stable sort by suit:

[[File:Sorting playing cards using stable sort.svg|400px]]

Within each suit, the stable sort preserves the ordering by rank that was already done. This idea can be extended to any number of keys and is utilised by [[radix sort]]. The same effect can be achieved with an unstable sort by using a lexicographic key comparison, which, e.g., compares first by suit, and then compares by rank if the suits are the same.

==Comparison of algorithms==
In this table, {{mvar|n}} is the number of records to be sorted. The columns "Average" and "Worst" give the [[time complexity]] in each case, under the assumption that the length of each key is constant, and that therefore all comparisons, swaps, and other needed operations can proceed in constant time. "Memory" denotes the amount of auxiliary storage needed beyond that used by the list itself, under the same assumption. The run times and the memory requirements listed below should be understood to be inside [[big O notation]], hence the base of the logarithms does not matter; the notation {{math|log<sup>2</sup> ''n''}} means {{math|(log ''n'')<sup>2</sup>}}.

=== Comparison sorts ===
Below is a table of [[comparison sort]]s. A comparison sort cannot perform better than {{math|''O''(''n'' log ''n'')}}.<ref>{{citation |last1=Cormen |first1=Thomas H. |author1-link=Thomas H. Cormen |last2=Leiserson |first2=Charles E. |author2-link=Charles E. Leiserson |last3=Rivest |first3=Ronald L. |author3-link=Ron Rivest |last4=Stein |first4=Clifford |author4-link=Clifford Stein|title=Introduction To Algorithms|url=https://books.google.com/books?id=NLngYyWFl_YC|edition=3rd |place=Cambridge, MA |publisher=The MIT Press |year=2009 |isbn=978-0-262-03293-3| page=167 |chapter=8}}</ref>

{|class="wikitable sortable"
|+ [[Comparison sort]]s
! Name !! Best !! Average !! Worst !! Memory !! Stable !! Method !! Other notes
<!-- Sorting Guide:
     00 = constant
     05 = log n
     10 = n^c, 0 < c < 1
     15 = n
     20 = n*log n or log n!
     23 = n*(log n)^2 or n^c, 1 < c < 2
     25 = n^2
     30 = n^c, c > 2
     40 = c^n, c > 1
     45 = n!
     50 = other -->
|- align="center"
| [[Quicksort]]
|style="background:#dfd"| {{Sort|20|<math>n \log n</math>}}
|style="background:#dfd"| {{Sort|20|<math>n \log n</math>}}
|style="background:#fdd"| {{Sort|25|<math>n^2</math>}}
|style="background:#ffd"| {{Sort|05|<math>\log n</math>}}
|style="background:#fdd"| No
| Partitioning
|align="left"| Quicksort is usually done in-place with {{math|''O''(log ''n'')}} stack space.<ref>{{cite book|last=Sedgewick|first=Robert|author-link=Robert Sedgewick (computer scientist)|title=Algorithms In C: Fundamentals, Data Structures, Sorting, Searching, Parts 1-4|url=https://books.google.com/books?id=ylAETlep0CwC|access-date=27 November 2012|edition=3|date=1 September 1998|publisher=Pearson Education|isbn=978-81-317-1291-7}}</ref><ref name=sedgewickQsortPaper>{{Cite journal | last1 = Sedgewick | first1 = R. | author-link1 = Robert Sedgewick (computer scientist)| title = Implementing Quicksort programs | doi = 10.1145/359619.359631 | journal = [[Communications of the ACM|Comm. ACM]] | volume = 21 | issue = 10 | pages = 847–857 | year = 1978 }}</ref>
|- align="center"
| [[Merge sort]]
|style="background:#dfd"| {{Sort|20|<math>n \log n</math>}}
|style="background:#dfd"| {{Sort|20|<math>n \log n</math>}}
|style="background:#dfd"| {{Sort|20|<math>n \log n</math>}}
|style="background:#fdd"| {{Sort|15|{{mvar|n}}}}
|style="background:#dfd"| Yes
| Merging
|align="left"| [[Merge sort#Parallel merge sort|Highly parallelizable]] (up to {{math|''O''(log ''n'')}} using the Three Hungarians' Algorithm).<ref>{{Cite conference | doi = 10.1145/800061.808726| title = An {{math|O(n log n)}} sorting network| work = Proceedings of the fifteenth annual ACM symposium on Theory of computing | conference = [[Symposium on Theory of Computing|STOC]] '83| pages = 1–9| year = 1983| last1 = Ajtai | first1 = M. |author-link1 = Miklós Ajtai| last2 = Komlós | first2 = J. |author-link2 = János Komlós (mathematician)| last3 = Szemerédi | first3 = E. |author-link3 = Endre Szemerédi| isbn = 0-89791-099-0}}</ref>
|- align="center"
|nowrap| [[In-place merge sort]]
| —
| —
|style="background:#ffd"| {{Sort|23|<math>n \log^2 n</math>}}
|style="background:#dfd"| {{Sort|00|1}}
|style="background:#dfd"| Yes
| Merging
|align="left"| Can be implemented as a stable sort based on stable in-place merging.<ref>{{Cite journal | doi = 10.1093/comjnl/35.6.643| title = Fast Stable Merging and Sorting in Constant Extra Space| journal = [[The Computer Journal|Comput. J.]]| volume = 35| issue = 6| pages = 643–650
| date = December 1992| last1 = Huang | first1 = B. C. | last2 = Langston | first2 = M. A.| citeseerx=10.1.1.54.8381| url = http://comjnl.oxfordjournals.org/content/35/6/643.full.pdf}}</ref>
|- align="center"
| [[Introsort]]
|style="background:#dfd"| {{Sort|20|<math>n \log n</math>}}
|style="background:#dfd"| {{Sort|20|<math>n \log n</math>}}
|style="background:#dfd"| {{Sort|20|<math>n \log n</math>}}
|style="background:#ffd"| {{Sort|05|<math>\log n</math>}}
|style="background:#fdd"| No
| Partitioning & Selection
|align="left"| Used in several [[Standard Template Library|STL]] implementations.
|- align="center"
| [[Heapsort]]
|style="background:#dfd"| {{Sort|20|<math>n \log n</math>}}
|style="background:#dfd"| {{Sort|20|<math>n \log n</math>}}
|style="background:#dfd"| {{Sort|20|<math>n \log n</math>}}
|style="background:#dfd"| {{Sort|00|1}}
|style="background:#fdd"| No
| Selection
|align="left"|
|- align="center"
| [[Insertion sort]]
|style="background:#dfd"| {{Sort|15|{{mvar|n}}}}
|style="background:#fdd"| {{Sort|25|<math>n^2</math>}}
|style="background:#fdd"| {{Sort|25|<math>n^2</math>}}
|style="background:#dfd"| {{Sort|00|1}}
|style="background:#dfd"| Yes
| Insertion
|align=left| {{math|''O''(''n'' + ''d'')}}, in the worst case over sequences that have ''d'' [[Inversion (discrete mathematics)|inversions]].
|- align="center"
| [[Block sort]]
|style="background:#dfd"| {{Sort|15|{{mvar|n}}}}
|style="background:#dfd"| {{Sort|20|<math>n \log n</math>}}
|style="background:#dfd"| {{Sort|20|<math>n \log n</math>}}
|style="background:#dfd"| {{Sort|00|1}}
|style="background:#dfd"| Yes
| Insertion & Merging
|align=left| Combine a block-based {{tmath|O(n)}} in-place merge algorithm<ref>{{Cite conference | doi = 10.1007/978-3-540-79228-4_22| title = Ratio Based Stable In-Place Merging| work = Theory and Applications of Models of Computation| conference = [[International Conference on Theory and Applications of Models of Computation|TAMC]] 2008| volume = 4978| pages = 246–257| series = [[Lecture Notes in Computer Science|LNCS]]| year = 2008| last1 = Kim | first1 = P. S. | last2 = Kutzner | first2 = A. | isbn = 978-3-540-79227-7| citeseerx = 10.1.1.330.2641}}</ref> with a [[Merge sort#Bottom-up implementation|bottom-up merge sort]].
|- align="center"
| [[Quadsort]]
|style="background:#dfd"| {{Sort|15|{{mvar|n}}}}
|style="background:#dfd"| {{Sort|20|<math>n \log n</math>}}
|style="background:#dfd"| {{Sort|20|<math>n \log n</math>}}
|style="background:#fdd"| {{Sort|15|{{mvar|n}}}}
|style="background:#dfd"| Yes
| Merging
|align="left"| Uses a 4-input [[sorting network]].<ref>https://qiita.com/hon_no_mushi/items/92ff1a220f179b8d40f9</ref>
|- align="center"
| [[Timsort]]
|style="background:#dfd"| {{Sort|15|{{mvar|n}}}}
|style="background:#dfd"| {{Sort|20|<math>n \log n</math>}}
|style="background:#dfd"| {{Sort|20|<math>n \log n</math>}}
|style="background:#fdd"| {{Sort|15|{{mvar|n}}}}
|style="background:#dfd"| Yes
| Insertion & Merging
|align="left"| Makes ''n'' comparisons when the data is already sorted or reverse sorted.
|- align="center"
| [[Selection sort]]
|style="background:#fdd"| {{Sort|25|<math>n^2</math>}}
|style="background:#fdd"| {{Sort|25|<math>n^2</math>}}
|style="background:#fdd"| {{Sort|25|<math>n^2</math>}}
|style="background:#dfd"| {{Sort|00|1}}
|style="background:#fdd"| No
| Selection
|align=left| Stable with {{tmath|O(n)}} extra space or when using linked lists.<ref>{{cite web|url=http://www.algolist.net/Algorithms/Sorting/Selection_sort|title=SELECTION SORT (Java, C++) - Algorithms and Data Structures|website=www.algolist.net|access-date=14 April 2018}}</ref>
|- align="center"
| [[Cubesort]]
|style="background:#dfd"| {{Sort|15|{{mvar|n}}}}
|style="background:#dfd"| {{Sort|20|<math>n \log n</math>}}
|style="background:#dfd"| {{Sort|20|<math>n \log n</math>}}
|style="background:#fdd"| {{Sort|15|{{mvar|n}}}}
|style="background:#dfd"| Yes
| Insertion
|align="left"| Makes ''n'' comparisons when the data is already sorted or reverse sorted.
|- align="center"
| [[Shellsort]]
|style="background:#dfd"| {{Sort|20|<math>n \log n</math>}}
|style="background:#ffd"| {{Sort|23|<math>n^{4/3}</math>}}
|style="background:#ffd"| {{Sort|23|<math>n^{3/2}</math>}}
|style="background:#dfd"| {{Sort|00|1}}
|style="background:#fdd"| No
| Insertion
|align=left| Small code size.
|- align="center"
| [[Bubble sort]]
|style="background:#dfd"| {{Sort|15|{{mvar|n}}}}
|style="background:#fdd"| {{Sort|25|<math>n^2</math>}}
|style="background:#fdd"| {{Sort|25|<math>n^2</math>}}
|style="background:#dfd"| {{Sort|00|1}}
|style="background:#dfd"| Yes <!-- Disputed: No. Equal values are never swapped, so they never get out of order -->
| Exchanging
|align=left| Tiny code size.
|- align="center"
| [[Tree sort]]
|style="background:#dfd"| {{Sort|20|<math>n \log n</math>}}
|style="background:#dfd"| {{Sort|20|<math>n \log n</math>}}
|style="background:#dfd"| {{Sort|20|<math>n \log n</math><wbr/>(balanced)}}
|style="background:#fdd"| {{Sort|15|{{mvar|n}}}}
|style="background:#dfd"| Yes
| Insertion
|align="left"| When using a [[self-balancing binary search tree]].
|- align="center"
| [[Cycle sort]]
|style="background:#fdd"| {{Sort|25|<math>n^2</math>}}
|style="background:#fdd"| {{Sort|25|<math>n^2</math>}}
|style="background:#fdd"| {{Sort|25|<math>n^2</math>}}
|style="background:#dfd"| {{Sort|00|1}}
|style="background:#fdd"| No
| Insertion
|align=left| In-place with theoretically optimal number of writes.
|- align="center"
| [[Library sort]]
|style="background:#dfd"| {{Sort|20|<math>n \log n</math>}}
|style="background:#dfd"| {{Sort|20|<math>n \log n</math>}}
|style="background:#fdd"| {{Sort|25|<math>n^2</math>}}
|style="background:#fdd"|{{Sort|15|{{mvar|n}}}}
|style="background:#fdd"| No
| Insertion
|align=left|Similar to a gapped insertion sort. It requires randomly permuting the input to warrant with-high-probability time bounds, what makes it not stable.
|- align="center"
| [[Patience sorting]]
|style="background:#dfd"| {{Sort|15|{{mvar|n}}}}
| —
|style="background:#dfd"| {{Sort|20|<math>n \log n</math>}}
|style="background:#fdd"| {{Sort|15|{{mvar|n}}}}
|style="background:#fdd"| No
| Insertion & Selection
|align="left"| Finds all the [[longest increasing subsequence]]s in {{math|''O''(''n'' log ''n'')}}.
|- align="center"
| [[Smoothsort]]
|style="background:#dfd"| {{Sort|15|{{mvar|n}}}}
|style="background:#dfd"| {{Sort|20|<math>n \log n</math>}}
|style="background:#dfd"| {{Sort|20|<math>n \log n</math>}}
|style="background:#dfd"| {{Sort|00|1}}
|style="background:#fdd"| No
| Selection
|align="left"| An [[adaptive sort|adaptive]] variant of heapsort based upon the [[Leonardo number|Leonardo sequence]] rather than a traditional [[binary heap]].
|- align="center"
| [[Strand sort]]
|style="background:#dfd"| {{Sort|15|{{mvar|n}}}}
|style="background:#fdd"| {{Sort|25|<math>n^2</math>}}
|style="background:#fdd"| {{Sort|25|<math>n^2</math>}}
|style="background:#fdd"| {{Sort|15|{{mvar|n}}}}
|style="background:#dfd"| Yes
| Selection
|align="left"|
|- align="center"
| [[Tournament sort]]
|style="background:#dfd"| {{Sort|20|<math>n \log n</math>}}
|style="background:#dfd"| {{Sort|20|<math>n \log n</math>}}
|style="background:#dfd"| {{Sort|20|<math>n \log n</math>}}
|style="background:#fdd"| {{Sort|15|{{mvar|n}}<ref>http://dbs.uni-leipzig.de/skripte/ADS1/PDF4/kap4.pdf</ref>}}
|style="background:#fdd"| No
| Selection
|align="left"| Variation of Heap Sort.
|- align="center"
| [[Cocktail shaker sort]]
|style="background:#dfd"| {{Sort|15|{{mvar|n}}}}
|style="background:#fdd"| {{Sort|25|<math>n^2</math>}}
|style="background:#fdd"| {{Sort|25|<math>n^2</math>}}
|style="background:#dfd"| {{Sort|00|1}}
|style="background:#dfd"| Yes
| Exchanging
|align=left|A variant of Bubblesort which deals well with small values at end of list
|- align="center"
| [[Comb sort]]
|style="background:#dfd"| {{Sort|20|<math>n \log n</math>}}
|style="background:#fdd"| {{Sort|25|<math>n^2</math>}}
|style="background:#fdd"| {{Sort|25|<math>n^2</math>}}
|style="background:#dfd"| {{Sort|00|1}}
|style="background:#fdd"| No
| Exchanging
|align="left"| Faster than bubble sort on average.
|- align="center"
| [[Gnome sort]]
|style="background:#dfd"| {{Sort|15|{{mvar|n}}}}
|style="background:#fdd"| {{Sort|25|<math>n^2</math>}}
|style="background:#fdd"| {{Sort|25|<math>n^2</math>}}
|style="background:#dfd"| {{Sort|00|1}}
|style="background:#dfd"| Yes
| Exchanging
|align=left| Tiny code size.
|- align="center"
|nowrap|UnShuffle Sort<ref>{{cite journal|last=Kagel|first=Art|title=Unshuffle, Not Quite a Sort|journal=Computer Language|volume=2|issue=11|date=November 1985}}</ref>
|style="background:#dfd"| {{Sort|15|{{mvar|n}}}}
|style="background:#fdd"| {{Sort|50|{{mvar|kn}}}}
|style="background:#fdd"| {{Sort|50|{{mvar|kn}}}}
|style="background:#fdd"| {{Sort|15|{{mvar|n}}}}
|style="background:#fdd"| No
|Distribution and Merge
|align=left|No exchanges are performed. The parameter ''k'' is proportional to the entropy in the input. ''k'' = 1 for ordered or reverse ordered input.
|- align="center"
|nowrap| Franceschini's method<ref>{{Cite journal | doi = 10.1007/s00224-006-1311-1| title = Sorting Stably, in Place, with O(n log n) Comparisons and O(n) Moves| journal = Theory of Computing Systems| volume = 40| issue = 4| pages = 327–353
| date = June 2007| last1 = Franceschini | first1 = G. }}</ref>
| —
|style="background:#dfd"| {{Sort|20|<math>n \log n</math>}}
|style="background:#dfd"| {{Sort|20|<math>n \log n</math>}}
|style="background:#dfd"| {{Sort|00|1}}
|style="background:#dfd"| Yes
|{{dunno}}
|align="left"|Performs {{math|''O''(''n'')}} data moves.
|- align="center"
| [[Odd–even sort]]
|style="background:#dfd"| {{Sort|15|{{mvar|n}}}}
|style="background:#fdd"| {{Sort|25|<math>n^2</math>}}
|style="background:#fdd"| {{Sort|25|<math>n^2</math>}}
|style="background:#dfd"| {{Sort|00|1}}
|style="background:#dfd"| Yes
| Exchanging
|align=left| Can be run on parallel processors easily.
|}

=== Non-comparison sorts ===
The following table describes [[integer sorting]] algorithms and other sorting algorithms that are not [[comparison sort]]s. As such, they are not limited to {{math|''Ω''(''n'' log ''n'')}}.<ref>{{citation |last1=Cormen |first1=Thomas H. |author1-link=Thomas H. Cormen |last2=Leiserson |first2=Charles E. |author2-link=Charles E. Leiserson |last3=Rivest |first3=Ronald L. |author3-link=Ron Rivest |last4=Stein |first4=Clifford |author4-link=Clifford Stein|title=Introduction To Algorithms|url=https://books.google.com/books?id=NLngYyWFl_YC|edition=2nd |place=Cambridge, MA |publisher=The MIT Press |year=2001 |isbn=0-262-03293-7| page=165 |chapter=8}}</ref> Complexities below assume {{mvar|n}} items to be sorted, with keys of size {{mvar|k}}, digit size {{mvar|d}}, and {{mvar|r}} the range of numbers to be sorted. Many of them are based on the assumption that the key size is large enough that all entries have unique key values, and hence that {{math|''n'' ≪ 2<sup>''k''</sup>}}, where ≪ means "much less than". In the unit-cost [[random-access machine]] model, algorithms with running time of <math>\scriptstyle n \cdot \frac{k}{d}</math>, such as radix sort, still take time proportional to {{math|Θ(''n'' log ''n'')}}, because {{mvar|n}} is limited to be not more than <math>2^\frac{k}{d}</math>, and a larger number of elements to sort would require a bigger {{mvar|k}} in order to store them in the memory.<ref>{{cite journal |first=Stefan |last=Nilsson |title=The Fastest Sorting Algorithm? |journal=[[Dr. Dobb's]] |year=2000 |url=http://www.drdobbs.com/architecture-and-design/the-fastest-sorting-algorithm/184404062}}</ref>

{|class="wikitable sortable"
|+ Non-comparison sorts
! Name !! Best !! Average !! Worst !! Memory !! Stable !! {{math|''n'' ≪ 2<sup>''k''</sup>}} !! Notes
|- align="center"
| [[Pigeonhole sort]]
| —
|style="background:#dfd"| <math>n + 2^k</math>
|style="background:#dfd"| <math>n + 2^k</math>
| <math>2^k</math>
| {{Yes}}
| {{Yes}}
|align="left"|
|- align="center"
| [[Bucket sort]] (uniform keys)
| —
|style="background:#dfd"| <math>n+k</math>
|style="background:#fdd"| <math>n^2 \cdot k</math>
| <math>n \cdot k</math>
| {{Yes}}
| {{No}}
|align="left"| Assumes uniform distribution of elements from the domain in the array.<ref name="clrs">{{Introduction to Algorithms|edition=2}}</ref>
|- align="center"
| [[Bucket sort]] (integer keys)
| —
|style="background:#dfd"| <math>n+r</math>
|style="background:#dfd"| <math>n+r</math>
| <math>n+r</math>
| {{Yes}}
| {{Yes}}
|align="left"| If ''r'' is {{tmath|O(n)}}, then average time complexity is {{tmath|O(n)}}.<ref name="gt">{{cite book
 | last1 = Goodrich | first1 = Michael T. | author1-link = Michael T. Goodrich
 | last2 = Tamassia | first2 = Roberto | author2-link = Roberto Tamassia
 | contribution = 4.5 Bucket-Sort and Radix-Sort
 | pages = 241–243
 | publisher = John Wiley & Sons
 | title = Algorithm Design: Foundations, Analysis, and Internet Examples
 | year = 2002
 | isbn = 978-0-471-38365-9}}</ref>
|- align="center"
| [[Counting sort]]
| —
|style="background:#dfd"| <math>n+r</math>
|style="background:#dfd"| <math>n+r</math>
| <math>n+r</math>
| {{Yes}}
| {{Yes}}
|align="left"| If ''r'' is {{tmath|O(n)}}, then average time complexity is {{tmath|O(n)}}.<ref name="clrs" />
|- align="center"
| [[Radix sort#Least significant digit radix sorts|LSD Radix Sort]]
| —
|style="background:#dfd"| <math>n \cdot \frac{k}{d}</math>
|style="background:#dfd"| <math>n \cdot \frac{k}{d}</math>
| <math>n + 2^d</math>
| {{Yes}}
| {{No}}
|align="left"|<math>\frac{k}{d}</math> recursion levels, 2<sup>''d''</sup> for count array.<ref name="clrs" /><ref name="gt" />
|- align="center"
| [[Radix sort#Most significant digit radix sorts|MSD Radix Sort]]
| —
|style="background:#dfd"| <math>n \cdot \frac{k}{d}</math>
|style="background:#dfd"| <math>n \cdot \frac{k}{d}</math>
| <math>n + 2^d</math>
| {{Yes}}
| {{No}}
|align="left"| Stable version uses an external array of size {{mvar|n}} to hold all of the bins.
|- align="center"
| [[Radix sort#Most significant digit radix sorts|MSD Radix Sort]] (in-place)
| —
|style="background:#dfd"| <math>n \cdot \frac{k}{1}</math>
|style="background:#dfd"| <math>n \cdot \frac{k}{1}</math>
| <math>2^1</math>
| {{No}}
| {{No}}
|align="left"| d=1 for in-place, <math>k/1</math> recursion levels, no count array.
|- align="center"
| [[Spreadsort]]
|style="background:#dfd"| {{mvar|n}}
|style="background:#dfd"| <math>n \cdot \frac{k}{d}</math>
|style="background:#dfd"| <math>n \cdot \left( {\frac{k}{s} + d} \right)</math>
| <math>\frac{k}{d} \cdot 2^d</math>
| {{No}}
| {{No}}
|align="left"| Asymptotic are based on the assumption that {{math|''n'' ≪ 2<sup>''k''</sup>}}, but the algorithm does not require this.
|- align="center"
| [[Burstsort]]
| —
|style="background:#dfd"| <math>n \cdot \frac{k}{d}</math>
|style="background:#dfd"| <math>n \cdot \frac{k}{d}</math>
| <math>n \cdot \frac{k}{d}</math>
| {{No}}
| {{No}}
|align="left"| Has better constant factor than radix sort for sorting strings. Though relies somewhat on specifics of commonly encountered strings.
|- align="center"
| [[Flashsort]]
|style="background:#dfd"| {{mvar|n}}
|style="background:#dfd"| <math>n+r</math>
|style="background:#fdd"| <math>n^2</math>
| {{mvar|n}}
| {{No}}
| {{No}}
|align="left"| Requires uniform distribution of elements from the domain in the array to run in linear time. If distribution is extremely skewed then it can go quadratic if underlying sort is quadratic (it is usually an insertion sort). In-place version is not stable.
|- align="center"
| [[Postman sort]]
| —
|style="background:#dfd"| <math>n \cdot \frac{k}{d}</math>
|style="background:#dfd"| <math>n \cdot \frac{k}{d}</math>
| <math>n+2^d</math>
| —
| {{No}}
|align="left"| A variation of bucket sort, which works very similar to MSD Radix Sort. Specific to post service needs.
|}

[[Samplesort]] can be used to parallelize any of the non-comparison sorts, by efficiently distributing data into several buckets and then passing down sorting to several processors, with no need to merge as buckets are already sorted between each other.

=== Others ===
Some algorithms are slow compared to those discussed above, such as the [[bogosort]] with unbounded run time and the [[stooge sort]] which has ''O''(''n''<sup>2.7</sup>) run time. These sorts are usually described for educational purposes in order to demonstrate how run time of algorithms is estimated. The following table describes some sorting algorithms that are impractical for real-life use in traditional software contexts due to extremely poor performance or specialized hardware requirements.

{|class="wikitable sortable"
! Name !! Best !! Average !! Worst !! Memory !! Stable !! Comparison !! Other notes
|- align="center"
| [[Bead sort]]
|style="background:#dfd"| {{Sort|15|{{mvar|n}}}}
|style="background:#ffd"| {{Sort|23|{{mvar|S}}}}
|style="background:#ffd"| {{Sort|23|{{mvar|S}}}}
|style="background:#fdd"| {{Sort|25|<math>n^2</math>}}
| {{N/A}}
| {{No}}
| align="left"| Works only with positive integers. Requires specialized hardware for it to run in guaranteed {{tmath|O(n)}} time. There is a possibility for software implementation, but running time will be {{tmath|O(S)}}, where {{mvar|S}} is sum of all integers to be sorted, in case of small integers it can be considered to be linear.
|- align="center"
| [[Pancake sorting|Simple pancake sort]]
| —
| {{Sort|15|{{mvar|n}}}}
| {{Sort|15|{{mvar|n}}}}
| {{Sort|05|<math>\log n</math>}}
| {{No}}
| {{Yes}}
|align="left"| Count is number of flips.
|- align="center"
| [[Spaghetti sort|Spaghetti (Poll) sort]]
|style="background:#dfd"| {{Sort|15|{{mvar|n}}}}
|style="background:#dfd"| {{Sort|15|{{mvar|n}}}}
|style="background:#dfd"| {{Sort|15|{{mvar|n}}}}
|style="background:#fdd"| {{Sort|25|<math>n^2</math>}}<!-- space should reflect amount of spaghetti needed; one rod must be at least n units long; n rods are needed. -->
| {{Yes}}
| Polling
|align="left"| This is a linear-time, analog algorithm for sorting a sequence of items, requiring ''O''(''n'') stack space, and the sort is stable. This requires ''n'' parallel processors. See [[spaghetti sort#Analysis]].<!-- see talk page discussion for June 2011 -->
|- align="center"
| [[Sorting network]]
| {{Sort|06|<math>\log^2 n</math>}}
| {{Sort|06|<math>\log^2 n</math>}}
| {{Sort|06|<math>\log^2 n</math>}}
| {{Sort|21|<math>n \log^2 n</math>}}
| {{Varies}} (stable sorting networks require more comparisons)
| {{Yes}}
|align="left"| Order of comparisons are set in advance based on a fixed network size. Impractical for more than 32 items.{{disputed inline|reason=Sorting networks are highly practical; the "specialized hardware" required is a consumer-grade GPU.|date=November 2015}}
|- align="center"
| [[Bitonic sorter]]
| {{Sort|06|<math>\log^2 n</math>}}
| {{Sort|06|<math>\log^2 n</math>}}
| {{Sort|06|<math>\log^2 n</math>}}
| {{Sort|21|<math>n \log^2 n</math>}}
| {{No}}
| {{Yes}}
|align="left"| An effective variation of Sorting networks.
|- align="center"
| [[Bogosort]]
|style="background:#dfd"| {{Sort|15|{{mvar|n}}}}
|style="background:#fdd"| {{Sort|99|<math>(n\times n!)</math>}}
|style="background:#fdd"| {{Sort|99|unbounded (certain), <math>(n\times n!)</math> (expected)}}
|style="background:#dfd"| {{Sort|00|1}}
| {{No}}
| {{Yes}}
|align=left| Random shuffling. Used for example purposes only, as even the expected best-case runtime is awful.<ref name="Fun07">{{citation
 | last1 = Gruber | first1 = H.
 | last2 = Holzer | first2 = M.
 | last3 = Ruepp | first3 = O.
 | contribution = Sorting the slow way: an analysis of perversely awful randomized sorting algorithms
 | doi = 10.1007/978-3-540-72914-3_17
 | pages = 183–197
 | publisher = Springer-Verlag
 | series = Lecture Notes in Computer Science
 | title = 4th International Conference on Fun with Algorithms, Castiglioncello, Italy, 2007
 | url = http://www.hermann-gruber.com/pdf/fun07-final.pdf
 | volume = 4475}}.</ref>
|- align="center"
| [[Stooge sort]]
|style="background:#fdd"| {{Sort|30|<math>n^{\log 3/\log 1.5}</math>}}
|style="background:#fdd"| {{Sort|30|<math>n^{\log 3/\log 1.5}</math>}}
|style="background:#fdd"| {{Sort|30|<math>n^{\log 3/\log 1.5}</math>}}
|style="background:#fdd"| {{Sort|15|{{mvar|n}}}}
| {{No}}
| {{Yes}}
|align="left"| Slower than most of the sorting algorithms (even naive ones) with a time complexity of {{math|1=''O''(''n''<sup>log 3 / log 1.5 </sup>) = ''O''(''n''<sup>2.7095...</sup>)}}.
|}
Theoretical computer scientists have detailed other sorting algorithms that provide better than ''O''(''n'' log ''n'') time complexity assuming additional constraints, including:
* '''Thorup's algorithm''', a randomized algorithm for sorting keys from a domain of finite size, taking {{math|''O''(''n'' log log ''n'')}} time and ''O''(''n'') space.<ref>{{Cite journal |doi=10.1006/jagm.2002.1211 |title=Randomized Sorting in O(n log log n) Time and Linear Space Using Addition, Shift, and Bit-wise Boolean Operations |journal=Journal of Algorithms |volume=42 |issue=2 |pages=205–230 |date=February 2002 |last1=Thorup |first1=M. |author1-link = Mikkel Thorup}}</ref>
* A randomized [[integer sorting]] algorithm taking <math>O\left(n \sqrt{\log \log n}\right)</math> expected time and ''O''(''n'') space.<ref>{{Cite conference |doi=10.1109/SFCS.2002.1181890 |title=Integer sorting in O(n√(log log n)) expected time and linear space |conference=The 43rd Annual IEEE [[Symposium on Foundations of Computer Science]] |pages=135–144 |year=2002 |first1=Yijie |last1=Han |last2=Thorup |first2=M. |author2-link = Mikkel Thorup |isbn=0-7695-1822-2}}</ref>

==Popular sorting algorithms==
While there are a large number of sorting algorithms, in practical implementations a few algorithms predominate. Insertion sort is widely used for small data sets, while for large data sets an asymptotically efficient sort is used, primarily heap sort, merge sort, or quicksort. Efficient implementations generally use a [[hybrid algorithm]], combining an asymptotically efficient algorithm for the overall sort with insertion sort for small lists at the bottom of a recursion. Highly tuned implementations use more sophisticated variants, such as [[Timsort]] (merge sort, insertion sort, and additional logic), used in Android, Java, and Python, and [[introsort]] (quicksort and heap sort), used (in variant forms) in some [[sort (C++)|C++ sort]] implementations and in .NET.

For more restricted data, such as numbers in a fixed interval, [[#Distribution sort|distribution sorts]] such as counting sort or radix sort are widely used. Bubble sort and variants are rarely used in practice, but are commonly found in teaching and theoretical discussions.

When physically sorting objects (such as alphabetizing papers, tests or books) people intuitively generally use insertion sorts for small sets. For larger sets, people often first bucket, such as by initial letter, and multiple bucketing allows practical sorting of very large sets. Often space is relatively cheap, such as by spreading objects out on the floor or over a large area, but operations are expensive, particularly moving an object a large distance – locality of reference is important. Merge sorts are also practical for physical objects, particularly as two hands can be used, one for each list to merge, while other algorithms, such as heap sort or quick sort, are poorly suited for human use. Other algorithms, such as [[library sort]], a variant of insertion sort that leaves spaces, are also practical for physical use.

===Simple sorts===
Two of the simplest sorts are insertion sort and selection sort, both of which are efficient on small data, due to low overhead, but not efficient on large data. Insertion sort is generally faster than selection sort in practice, due to fewer comparisons and good performance on almost-sorted data, and thus is preferred in practice, but selection sort uses fewer writes, and thus is used when write performance is a limiting factor.

====Insertion sort====
{{Main|Insertion sort}}
''[[Insertion sort]]'' is a simple sorting algorithm that is relatively efficient for small lists and mostly sorted lists, and is often used as part of more sophisticated algorithms. It works by taking elements from the list one by one and inserting them in their correct position into a new sorted list similar to how we put money in our wallet.<ref>{{citation |last=Wirth |first=Niklaus |author-link=Niklaus Wirth |title=Algorithms & Data Structures |place=Upper Saddle River, NJ |publisher=Prentice-Hall |year=1986 |isbn=978-0130220059 |pages=76–77}}</ref> In arrays, the new list and the remaining elements can share the array's space, but insertion is expensive, requiring shifting all following elements over by one. [[#Shellsort|Shellsort]] (see below) is a variant of insertion sort that is more efficient for larger lists.

====Selection sort====
{{Main|Selection sort}}

''Selection sort'' is an [[in-place algorithm|in-place]] [[comparison sort]]. It has [[Big O notation|O]](''n''<sup>2</sup>) complexity, making it inefficient on large lists, and generally performs worse than the similar [[insertion sort]]. Selection sort is noted for its simplicity, and also has performance advantages over more complicated algorithms in certain situations.

The algorithm finds the minimum value, swaps it with the value in the first position, and repeats these steps for the remainder of the list.<ref>{{harvnb|Wirth|1986|pp=79–80}}</ref> It does no more than ''n'' swaps, and thus is useful where swapping is very expensive.

===Efficient sorts===
Practical general sorting algorithms are almost always based on an algorithm with average time complexity (and generally worst-case complexity) O(''n'' log ''n''), of which the most common are heap sort, merge sort, and quicksort. Each has advantages and drawbacks, with the most significant being that simple implementation of merge sort uses O(''n'') additional space, and simple implementation of quicksort has O(''n''<sup>2</sup>) worst-case complexity. These problems can be solved or ameliorated at the cost of a more complex algorithm.

While these algorithms are asymptotically efficient on random data, for practical efficiency on real-world data various modifications are used. First, the overhead of these algorithms becomes significant on smaller data, so often a hybrid algorithm is used, commonly switching to insertion sort once the data is small enough. Second, the algorithms often perform poorly on already sorted data or almost sorted data – these are common in real-world data, and can be sorted in O(''n'') time by appropriate algorithms. Finally, they may also be [[unstable sort|unstable]], and stability is often a desirable property in a sort. Thus more sophisticated algorithms are often employed, such as [[Timsort]] (based on merge sort) or [[introsort]] (based on quicksort, falling back to heap sort).

====Merge sort====
{{Main|Merge sort}}
''Merge sort'' takes advantage of the ease of merging already sorted lists into a new sorted list. It starts by comparing every two elements (i.e., 1 with 2, then 3 with 4...) and swapping them if the first should come after the second. It then merges each of the resulting lists of two into lists of four, then merges those lists of four, and so on; until at last two lists are merged into the final sorted list.<ref>{{harvnb|Wirth|1986|pp=101–102}}</ref> Of the algorithms described here, this is the first that scales well to very large lists, because its worst-case running time is O(''n'' log ''n''). It is also easily applied to lists, not only arrays, as it only requires sequential access, not random access. However, it has additional O(''n'') space complexity, and involves a large number of copies in simple implementations.

Merge sort has seen a relatively recent surge in popularity for practical implementations, due to its use in the sophisticated algorithm [[Timsort]], which is used for the standard sort routine in the programming languages [[Python (programming language)|Python]]<ref>{{cite web |url=http://svn.python.org/projects/python/trunk/Objects/listsort.txt|title=Tim Peters's original description of timsort|website =python.org|access-date=14 April 2018}}</ref> and [[Java (programming language)|Java]] (as of [[JDK7]]<ref>{{cite web|url= http://cr.openjdk.java.net/~martin/webrevs/openjdk7/timsort/raw_files/new/src/share/classes/java/util/TimSort.java|title=OpenJDK's TimSort.java |website=java.net|access-date=14 April 2018}}</ref>). Merge sort itself is the standard routine in [[Perl]],<ref>{{cite web|url=http://perldoc.perl.org/functions/sort.html|title=sort - perldoc.perl.org|website=perldoc.perl.org |access-date=14 April 2018}}</ref> among others, and has been used in Java at least since 2000 in [[Java version history#J2SE 1.3|JDK1.3]].<ref name="mergesort_in_jdk13">[http://java.sun.com/j2se/1.3/docs/api/java/util/Arrays.html#sort(java.lang.Object%5B%5D) Merge sort in Java 1.3], Sun. {{Webarchive|url=https://web.archive.org/web/20090304021927/http://java.sun.com/j2se/1.3/docs/api/java/util/Arrays.html#sort(java.lang.Object%5B%5D)#sort(java.lang.Object%5B%5D) |date=2009-03-04 }}</ref>

====Heapsort====
{{Main|Heapsort}}
''Heapsort'' is a much more efficient version of [[selection sort]]. It also works by determining the largest (or smallest) element of the list, placing that at the end (or beginning) of the list, then continuing with the rest of the list, but accomplishes this task efficiently by using a data structure called a [[heap (data structure)|heap]], a special type of [[binary tree]].<ref>{{harvnb|Wirth|1986|pp=87–89}}</ref> Once the data list has been made into a heap, the root node is guaranteed to be the largest (or smallest) element. When it is removed and placed at the end of the list, the heap is rearranged so the largest element remaining moves to the root. Using the heap, finding the next largest element takes O(log ''n'') time, instead of O(''n'') for a linear scan as in simple selection sort. This allows Heapsort to run in O(''n'' log ''n'') time, and this is also the worst case complexity.

====Quicksort====
{{Main|Quicksort}}
''Quicksort'' is a [[divide and conquer algorithm]] which relies on a ''partition'' operation: to partition an array, an element called a ''pivot'' is selected.<ref>{{harvnb|Wirth|1986|p=93}}</ref><ref>{{citation |last1=Cormen |first1=Thomas H. |author1-link=Thomas H. Cormen |last2=Leiserson |first2=Charles E. |author2-link=Charles E. Leiserson |last3=Rivest |first3=Ronald L. |author3-link=Ron Rivest |last4=Stein |first4=Clifford |author4-link=Clifford Stein |title=Introduction to Algorithms |edition=3rd |place=Cambridge, MA |publisher=The MIT Press |year=2009 |isbn=978-0262033848 |pages=171–172}}</ref> All elements smaller than the pivot are moved before it and all greater elements are moved after it. This can be done efficiently in linear time and [[in-place algorithm|in-place]]. The lesser and greater sublists are then recursively sorted. This yields average time complexity of O(''n'' log ''n''), with low overhead, and thus this is a popular algorithm. Efficient implementations of quicksort (with in-place partitioning) are typically unstable sorts and somewhat complex, but are among the fastest sorting algorithms in practice. Together with its modest O(log ''n'') space usage, quicksort is one of the most popular sorting algorithms and is available in many standard programming libraries.

The important caveat about quicksort is that its worst-case performance is O(''n''<sup>2</sup>); while this is rare, in naive implementations (choosing the first or last element as pivot) this occurs for sorted data, which is a common case. The most complex issue in quicksort is thus choosing a good pivot element, as consistently poor choices of pivots can result in drastically slower O(''n''<sup>2</sup>) performance, but good choice of pivots yields O(''n'' log ''n'') performance, which is asymptotically optimal. For example, if at each step the [[median]] is chosen as the pivot then the algorithm works in O(''n''&nbsp;log&nbsp;''n''). Finding the median, such as by the [[median of medians]] [[selection algorithm]] is however an O(''n'') operation on unsorted lists and therefore exacts significant overhead with sorting. In practice choosing a random pivot almost certainly yields O(''n''&nbsp;log&nbsp;''n'') performance.

==== Shellsort ====
[[File:Shell_sorting_algorithm_color_bars.svg|right|thumb|A Shell sort, different from bubble sort in that it moves elements to numerous [[Swap (computer science)|swapping positions]].]]
{{Main|Shellsort|l1=Shell sort}}
''Shellsort'' was invented by [[Donald Shell]] in 1959.<ref name="Shell">{{Cite journal
  |url=http://penguin.ewu.edu/cscd300/Topic/AdvSorting/p30-shell.pdf
  |last=Shell
  |first=D. L.
  |title=A High-Speed Sorting Procedure
  |journal=Communications of the ACM
  |volume=2
  |issue=7
  |year=1959
  |pages=30–32
  |doi=10.1145/368370.368387}}</ref> It improves upon insertion sort by moving out of order elements more than one position at a time. The concept behind Shellsort is that insertion sort performs in {{tmath|O(kn)}} time, where k is the greatest distance between two out-of-place elements. This means that generally, they perform in ''O''(''n''<sup>2</sup>), but for data that is mostly sorted, with only a few elements out of place, they perform faster. So, by first sorting elements far away, and progressively shrinking the gap between the elements to sort, the final sort computes much faster. One implementation can be described as arranging the data sequence in a two-dimensional array and then sorting the columns of the array using insertion sort.

The worst-case time complexity of Shellsort is an [[open problem]] and depends on the gap sequence used, with known complexities ranging from ''O''(''n''<sup>2</sup>) to ''O''(''n''<sup>4/3</sup>) and Θ(''n'' log<sup>2</sup> ''n''). This, combined with the fact that Shellsort is [[in-place]], only needs a relatively small amount of code, and does not require use of the [[call stack]], makes it is useful in situations where memory is at a premium, such as in [[embedded system]]s and [[operating system kernel]]s.

===Bubble sort and variants===
{{unreferenced section|date=May 2019}}
Bubble sort, and variants such as the [[shell sort]] and [[cocktail sort]], are simple, highly inefficient sorting algorithms. They are frequently seen in introductory texts due to ease of analysis, but they are rarely used in practice.

====Bubble sort====
[[File:Bubblesort-edited-color.svg|thumb|right|A bubble sort, a sorting algorithm that continuously steps through a list, [[Swap (computer science)|swapping]] items until they appear in the correct order.]]
{{Main|Bubble sort}}

''Bubble sort'' is a simple sorting algorithm. The algorithm starts at the beginning of the data set. It compares the first two elements, and if the first is greater than the second, it swaps them. It continues doing this for each pair of adjacent elements to the end of the data set. It then starts again with the first two elements, repeating until no swaps have occurred on the last pass.<ref>{{harvnb|Wirth|1986|pp=81–82}}</ref> This algorithm's average time and worst-case performance is O(''n''<sup>2</sup>), so it is rarely used to sort large, unordered data sets. Bubble sort can be used to sort a small number of items (where its asymptotic inefficiency is not a high penalty). Bubble sort can also be used efficiently on a list of any length that is nearly sorted (that is, the elements are not significantly out of place). For example, if any number of elements are out of place by only one position (e.g. 0123546789 and 1032547698), bubble sort's exchange will get them in order on the first pass, the second pass will find all elements in order, so the sort will take only 2''n'' time.

<ref>{{Cite web
  | url=https://github.com/torvalds/linux/blob/72932611b4b05bbd89fafa369d564ac8e449809b/kernel/groups.c#L105
  | title=kernel/groups.c
  | access-date=2012-05-05}}</ref>

====Comb sort====
{{Main|Comb sort}}
''Comb sort'' is a relatively simple sorting algorithm based on [[bubble sort]] and originally designed by Włodzimierz Dobosiewicz in 1980.<ref name=BB>{{Cite journal | doi = 10.1016/S0020-0190(00)00223-4| title = Analyzing variants of Shellsort| journal = [[Information Processing Letters|Inf. Process. Lett.]]| volume = 79| issue = 5| pages = 223–227
| date = 15 September 2001| last1 = Brejová | first1 = B. }}</ref> It was later rediscovered and popularized by Stephen Lacey and Richard Box with a [[Byte Magazine|''Byte'' Magazine]] article published in April 1991. The basic idea is to eliminate ''turtles'', or small values near the end of the list, since in a bubble sort these slow the sorting down tremendously. (''Rabbits'', large values around the beginning of the list, do not pose a problem in bubble sort) It accomplishes this by initially swapping elements that are a certain distance from one another in the array, rather than only swapping elements if they are adjacent to one another, and then shrinking the chosen distance until it is operating as a normal bubble sort. Thus, if Shellsort can be thought of as a generalized version of insertion sort that swaps elements spaced a certain distance away from one another, comb sort can be thought of as the same generalization applied to bubble sort.

===Distribution sort===
{{see also|External sorting}}
''Distribution sort'' refers to any sorting algorithm where data is distributed from their input to multiple intermediate structures which are then gathered and placed on the output. For example, both [[bucket sort]] and [[flashsort]] are distribution based sorting algorithms. Distribution sorting algorithms can be used on a single processor, or they can be a [[distributed algorithm]], where individual subsets are separately sorted on different processors, then combined. This allows [[external sorting]] of data too large to fit into a single computer's memory.

====Counting sort====
{{Main|Counting sort}}
Counting sort is applicable when each input is known to belong to a particular set, ''S'', of possibilities.  The algorithm runs in O(|''S''| + ''n'') time and O(|''S''|) memory where ''n'' is the length of the input.  It works by creating an integer array of size |''S''| and using the ''i''th bin to count the occurrences of the ''i''th member of ''S'' in the input.  Each input is then counted by incrementing the value of its corresponding bin.  Afterward, the counting array is looped through to arrange all of the inputs in order.  This sorting algorithm often cannot be used because ''S'' needs to be reasonably small for the algorithm to be efficient, but it is extremely fast and demonstrates great asymptotic behavior as ''n'' increases.  It also can be modified to provide stable behavior.

====Bucket sort====
{{Main|Bucket sort}}
Bucket sort is a [[divide and conquer algorithm|divide and conquer]] sorting algorithm that generalizes [[counting sort]] by partitioning an array into a finite number of buckets.  Each bucket is then sorted individually, either using a different sorting algorithm, or by recursively applying the bucket sorting algorithm.

A bucket sort works best when the elements of the data set are evenly distributed across all buckets.

====Radix sort====
{{Main|Radix sort}}
''Radix sort'' is an algorithm that sorts numbers by processing individual digits. ''n'' numbers consisting of ''k'' digits each are sorted in O(''n'' · ''k'') time.  Radix sort can process digits of each number either starting from the [[least significant digit]] (LSD) or starting from the [[most significant digit]] (MSD).  The LSD algorithm first sorts the list by the least significant digit while preserving their relative order using a stable sort. Then it sorts them by the next digit, and so on from the least significant to the most significant, ending up with a sorted list. While the LSD radix sort requires the use of a stable sort, the MSD radix sort algorithm does not (unless stable sorting is desired).  In-place MSD radix sort is not stable.  It is common for the [[counting sort]] algorithm to be used internally by the radix sort.  A [[hybrid algorithm|hybrid]] sorting approach, such as using [[insertion sort]] for small bins, improves performance of radix sort significantly.

==Memory usage patterns and index sorting==
When the size of the array to be sorted approaches or exceeds the available primary memory, so that (much slower) disk or swap space must be employed, the memory usage pattern of a sorting algorithm becomes important, and an algorithm that might have been fairly efficient when the array fit easily in RAM may become impractical. In this scenario, the total number of comparisons becomes (relatively) less important, and the number of times sections of memory must be copied or swapped to and from the disk can dominate the performance characteristics of an algorithm. Thus, the number of passes and the localization of comparisons can be more important than the raw number of comparisons, since comparisons of nearby elements to one another happen at [[computer bus|system bus]] speed (or, with caching, even at [[Central Processing Unit|CPU]] speed), which, compared to disk speed, is virtually instantaneous.

For example, the popular recursive [[quicksort]] algorithm provides quite reasonable performance with adequate RAM, but due to the recursive way that it copies portions of the array it becomes much less practical when the array does not fit in RAM, because it may cause a number of slow copy or move operations to and from disk. In that scenario, another algorithm may be preferable even if it requires more total comparisons.

One way to work around this problem, which works well when complex records (such as in a [[relational database]]) are being sorted by a relatively small key field, is to create an index into the array and then sort the index, rather than the entire array. (A sorted version of the entire array can then be produced with one pass, reading from the index, but often even that is unnecessary, as having the sorted index is adequate.)  Because the index is much smaller than the entire array, it may fit easily in memory where the entire array would not, effectively eliminating the disk-swapping problem. This procedure is sometimes called "tag sort".<ref>{{cite web|url=https://www.pcmag.com/encyclopedia_term/0,2542,t=tag+sort&i=52532,00.asp|title=tag sort Definition from PC Magazine Encyclopedia|website=www.pcmag.com|access-date=14 April 2018}}</ref>

Another technique for overcoming the memory-size problem is using [[external sorting]], for example one of the ways is to combine two algorithms in a way that takes advantage of the strength of each to improve overall performance. For instance, the array might be subdivided into chunks of a size that will fit in RAM, the contents of each chunk sorted using an efficient algorithm (such as [[quicksort]]), and the results merged using a ''k''-way merge similar to that used in [[mergesort]]. This is faster than performing either mergesort or quicksort over the entire list.<ref>[[Donald Knuth]], ''[[The Art of Computer Programming]]'', Volume 3: ''Sorting and Searching'', Second Edition. Addison-Wesley, 1998, {{ISBN|0-201-89685-0}}, Section 5.4: External Sorting, pp. 248–379.</ref><ref>[[Ellis Horowitz]] and [[Sartaj Sahni]], ''Fundamentals of Data Structures'', H. Freeman & Co., {{ISBN|0-7167-8042-9}}.</ref>

Techniques can also be combined. For sorting very large sets of data that vastly exceed system memory, even the index may need to be sorted using an algorithm or combination of algorithms designed to perform reasonably with [[virtual memory]], i.e., to reduce the amount of swapping required.

==Related algorithms==
Related problems include [[partial sorting]] (sorting only the ''k'' smallest elements of a list, or alternatively computing the ''k'' smallest elements, but unordered) and [[selection algorithm|selection]] (computing the ''k''th smallest element). These can be solved inefficiently by a total sort, but more efficient algorithms exist, often derived by generalizing a sorting algorithm. The most notable example is [[quickselect]], which is related to [[quicksort]]. Conversely, some sorting algorithms can be derived by repeated application of a selection algorithm; quicksort and quickselect can be seen as the same pivoting move, differing only in whether one recurses on both sides (quicksort, [[divide and conquer algorithm|divide and conquer]]) or one side (quickselect, [[decrease and conquer]]).

A kind of opposite of a sorting algorithm is a [[shuffling algorithm]]. These are fundamentally different because they require a source of random numbers. Shuffling can also be implemented by a sorting algorithm, namely by a random sort: assigning a random number to each element of the list and then sorting based on the random numbers. This is generally not done in practice, however, and there is a well-known simple and efficient algorithm for shuffling: the [[Fisher–Yates shuffle]].

==See also==
* {{annotated link|Collation}}
* {{annotated link|Schwartzian transform}}
* {{annotated link|Search algorithm}}
* {{annotated link|Quantum sort}}

==References==
{{More footnotes|date=September 2009}}
{{Reflist|30em}}

==Further reading==
* {{citation |last=Knuth |first=Donald E. |author-link=Donald Knuth |series=The Art of Computer Programming |volume=3 |title=Sorting and Searching |edition=2nd |place=Boston |publisher=Addison-Wesley |year=1998 |isbn=0-201-89685-0 |ref=none}}
* {{citation |last=Sedgewick |first=Robert |author-link=Robert Sedgewick (computer scientist) |chapter=Efficient Sorting by Computer: An Introduction |title=Computational Probability |location=New York |publisher=Academic Press |year=1980 |isbn=0-12-394680-8 |pages=[https://archive.org/details/computationalpro00actu/page/101 101–130] |url=https://archive.org/details/computationalpro00actu/page/101 |ref = none}}

==External links==
{{wikibooks|Algorithm implementation|Sorting|Sorting algorithms}}
{{wikibooks|A-level Mathematics|OCR/D1/Algorithms#Sorting Algorithms|Sorting algorithms}}
{{Commons category|Sort algorithms|Sorting algorithms}}
* {{webarchive |url=https://web.archive.org/web/20150303022622/http://www.sorting-algorithms.com/ |date=3 March 2015 |title=Sorting Algorithm Animations}}
* [http://www.iti.fh-flensburg.de/lang/algorithmen/sortieren/algoen.htm Sequential and parallel sorting algorithms] – explanations and analyses of many sorting algorithms
* [https://www.nist.gov/dads/ Dictionary of Algorithms, Data Structures, and Problems] – dictionary of algorithms, techniques, common functions, and problems
* [http://www.softpanorama.org/Algorithms/sorting.shtml Slightly Skeptical View on Sorting Algorithms] – Discusses several classic algorithms and promotes alternatives to the [[quicksort]] algorithm
* [https://www.youtube.com/watch?v=kPRA0W1kECg 15 Sorting Algorithms in 6 Minutes (Youtube)] – visualization and "audibilization" of 15 Sorting Algorithms in 6 Minutes
* [https://oeis.org/A036604 A036604 sequence in OEIS database titled "Sorting numbers: minimal number of comparisons needed to sort n elements"] – which performed by [[Ford–Johnson algorithm]]
* [https://www.youtube.com/watch?v=d2d0r1bArUQ Sorting Algorithms Used on Famous Paintings (Youtube)] - Visualization of Sorting Algorithms on Many Famous Paintings.
{{sorting}}{{Data structures and algorithms}}
{{DEFAULTSORT:Sorting Algorithm}}
[[Category:Sorting algorithms| ]]
[[Category:Data processing]]
